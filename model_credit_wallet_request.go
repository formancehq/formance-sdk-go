/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the CreditWalletRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditWalletRequest{}

// CreditWalletRequest struct for CreditWalletRequest
type CreditWalletRequest struct {
	Amount Monetary `json:"amount"`
}

// NewCreditWalletRequest instantiates a new CreditWalletRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditWalletRequest(amount Monetary) *CreditWalletRequest {
	this := CreditWalletRequest{}
	this.Amount = amount
	return &this
}

// NewCreditWalletRequestWithDefaults instantiates a new CreditWalletRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditWalletRequestWithDefaults() *CreditWalletRequest {
	this := CreditWalletRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *CreditWalletRequest) GetAmount() Monetary {
	if o == nil {
		var ret Monetary
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CreditWalletRequest) GetAmountOk() (*Monetary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CreditWalletRequest) SetAmount(v Monetary) {
	o.Amount = v
}

func (o CreditWalletRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditWalletRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

type NullableCreditWalletRequest struct {
	value *CreditWalletRequest
	isSet bool
}

func (v NullableCreditWalletRequest) Get() *CreditWalletRequest {
	return v.value
}

func (v *NullableCreditWalletRequest) Set(val *CreditWalletRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditWalletRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditWalletRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditWalletRequest(val *CreditWalletRequest) *NullableCreditWalletRequest {
	return &NullableCreditWalletRequest{value: val, isSet: true}
}

func (v NullableCreditWalletRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditWalletRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


