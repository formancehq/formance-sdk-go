/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the DebitWalletRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DebitWalletRequest{}

// DebitWalletRequest struct for DebitWalletRequest
type DebitWalletRequest struct {
	Amount Monetary `json:"amount"`
	// Set to true to create a pending hold. If false, the wallet will be debited immediately.
	Pending *bool `json:"pending,omitempty"`
}

// NewDebitWalletRequest instantiates a new DebitWalletRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDebitWalletRequest(amount Monetary) *DebitWalletRequest {
	this := DebitWalletRequest{}
	this.Amount = amount
	return &this
}

// NewDebitWalletRequestWithDefaults instantiates a new DebitWalletRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDebitWalletRequestWithDefaults() *DebitWalletRequest {
	this := DebitWalletRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *DebitWalletRequest) GetAmount() Monetary {
	if o == nil {
		var ret Monetary
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *DebitWalletRequest) GetAmountOk() (*Monetary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *DebitWalletRequest) SetAmount(v Monetary) {
	o.Amount = v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *DebitWalletRequest) GetPending() bool {
	if o == nil || isNil(o.Pending) {
		var ret bool
		return ret
	}
	return *o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebitWalletRequest) GetPendingOk() (*bool, bool) {
	if o == nil || isNil(o.Pending) {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *DebitWalletRequest) HasPending() bool {
	if o != nil && !isNil(o.Pending) {
		return true
	}

	return false
}

// SetPending gets a reference to the given bool and assigns it to the Pending field.
func (o *DebitWalletRequest) SetPending(v bool) {
	o.Pending = &v
}

func (o DebitWalletRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DebitWalletRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if !isNil(o.Pending) {
		toSerialize["pending"] = o.Pending
	}
	return toSerialize, nil
}

type NullableDebitWalletRequest struct {
	value *DebitWalletRequest
	isSet bool
}

func (v NullableDebitWalletRequest) Get() *DebitWalletRequest {
	return v.value
}

func (v *NullableDebitWalletRequest) Set(val *DebitWalletRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDebitWalletRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDebitWalletRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDebitWalletRequest(val *DebitWalletRequest) *NullableDebitWalletRequest {
	return &NullableDebitWalletRequest{value: val, isSet: true}
}

func (v NullableDebitWalletRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDebitWalletRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


