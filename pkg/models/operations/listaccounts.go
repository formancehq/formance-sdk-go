// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/models/shared"
	"net/http"
)

type ListAccountsRequest struct {
	// Filter accounts by address pattern (regular expression placed between ^ and $).
	Address *string `queryParam:"style=form,explode=true,name=address"`
	// Pagination cursor, will return accounts after given address, in descending order.
	After *string `queryParam:"style=form,explode=true,name=after"`
	// Filter accounts by their balance (default operator is gte)
	Balance *int64 `queryParam:"style=form,explode=true,name=balance"`
	// Parameter used in pagination requests. Maximum page size is set to 1000.
	// Set to the value of next for the next page of results.
	// Set to the value of previous for the previous page of results.
	// No other parameters can be set when this parameter is set.
	//
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// Name of the ledger.
	Ledger string `pathParam:"style=simple,explode=false,name=ledger"`
	// Filter accounts by metadata key value pairs. Nested objects can be used as seen in the example below.
	Metadata map[string]any `queryParam:"style=deepObject,explode=true,name=metadata"`
	// The maximum number of results to return per page.
	//
	PageSize *int64 `queryParam:"style=form,explode=true,name=pageSize"`
	// Parameter used in pagination requests. Maximum page size is set to 1000.
	// Set to the value of next for the next page of results.
	// Set to the value of previous for the previous page of results.
	// No other parameters can be set when this parameter is set.
	// Deprecated, please use `cursor` instead.
	//
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	PaginationToken *string `queryParam:"style=form,explode=true,name=pagination_token"`
}

func (l *ListAccountsRequest) GetAddress() *string {
	if l == nil {
		return nil
	}
	return l.Address
}

func (l *ListAccountsRequest) GetAfter() *string {
	if l == nil {
		return nil
	}
	return l.After
}

func (l *ListAccountsRequest) GetBalance() *int64 {
	if l == nil {
		return nil
	}
	return l.Balance
}

func (l *ListAccountsRequest) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListAccountsRequest) GetLedger() string {
	if l == nil {
		return ""
	}
	return l.Ledger
}

func (l *ListAccountsRequest) GetMetadata() map[string]any {
	if l == nil {
		return nil
	}
	return l.Metadata
}

func (l *ListAccountsRequest) GetPageSize() *int64 {
	if l == nil {
		return nil
	}
	return l.PageSize
}

func (l *ListAccountsRequest) GetPaginationToken() *string {
	if l == nil {
		return nil
	}
	return l.PaginationToken
}

type ListAccountsResponse struct {
	// OK
	AccountsCursorResponse *shared.AccountsCursorResponse
	// HTTP response content type for this operation
	ContentType string
	// Not found
	ErrorResponse *shared.ErrorResponse
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (l *ListAccountsResponse) GetAccountsCursorResponse() *shared.AccountsCursorResponse {
	if l == nil {
		return nil
	}
	return l.AccountsCursorResponse
}

func (l *ListAccountsResponse) GetContentType() string {
	if l == nil {
		return ""
	}
	return l.ContentType
}

func (l *ListAccountsResponse) GetErrorResponse() *shared.ErrorResponse {
	if l == nil {
		return nil
	}
	return l.ErrorResponse
}

func (l *ListAccountsResponse) GetStatusCode() int {
	if l == nil {
		return 0
	}
	return l.StatusCode
}

func (l *ListAccountsResponse) GetRawResponse() *http.Response {
	if l == nil {
		return nil
	}
	return l.RawResponse
}
