// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/models/shared"
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
	"math/big"
	"net/http"
)

type V2RevertTransactionRequest struct {
	V2RevertTransactionRequest *shared.V2RevertTransactionRequest `request:"mediaType=application/json"`
	// Revert transaction at effective date of the original tx
	AtEffectiveDate *bool `queryParam:"style=form,explode=true,name=atEffectiveDate"`
	// Set the dryRun mode. dry run mode doesn't add the logs to the database or publish a message to the message broker.
	DryRun *bool `queryParam:"style=form,explode=true,name=dryRun"`
	// Force revert
	Force *bool `queryParam:"style=form,explode=true,name=force"`
	// Transaction ID.
	ID *big.Int `pathParam:"style=simple,explode=false,name=id"`
	// Name of the ledger.
	Ledger string `pathParam:"style=simple,explode=false,name=ledger"`
}

func (v V2RevertTransactionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2RevertTransactionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"id", "ledger"}); err != nil {
		return err
	}
	return nil
}

func (v *V2RevertTransactionRequest) GetV2RevertTransactionRequest() *shared.V2RevertTransactionRequest {
	if v == nil {
		return nil
	}
	return v.V2RevertTransactionRequest
}

func (v *V2RevertTransactionRequest) GetAtEffectiveDate() *bool {
	if v == nil {
		return nil
	}
	return v.AtEffectiveDate
}

func (v *V2RevertTransactionRequest) GetDryRun() *bool {
	if v == nil {
		return nil
	}
	return v.DryRun
}

func (v *V2RevertTransactionRequest) GetForce() *bool {
	if v == nil {
		return nil
	}
	return v.Force
}

func (v *V2RevertTransactionRequest) GetID() *big.Int {
	if v == nil {
		return big.NewInt(0)
	}
	return v.ID
}

func (v *V2RevertTransactionRequest) GetLedger() string {
	if v == nil {
		return ""
	}
	return v.Ledger
}

type V2RevertTransactionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	V2CreateTransactionResponse *shared.V2CreateTransactionResponse
}

func (v *V2RevertTransactionResponse) GetContentType() string {
	if v == nil {
		return ""
	}
	return v.ContentType
}

func (v *V2RevertTransactionResponse) GetStatusCode() int {
	if v == nil {
		return 0
	}
	return v.StatusCode
}

func (v *V2RevertTransactionResponse) GetRawResponse() *http.Response {
	if v == nil {
		return nil
	}
	return v.RawResponse
}

func (v *V2RevertTransactionResponse) GetV2CreateTransactionResponse() *shared.V2CreateTransactionResponse {
	if v == nil {
		return nil
	}
	return v.V2CreateTransactionResponse
}
