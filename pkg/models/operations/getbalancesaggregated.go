// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/models/shared"
	"net/http"
)

type GetBalancesAggregatedRequest struct {
	// Filter balances involving given account, either as source or destination.
	Address *string `queryParam:"style=form,explode=true,name=address"`
	// Name of the ledger.
	Ledger string `pathParam:"style=simple,explode=false,name=ledger"`
	// Use insertion date instead of effective date
	UseInsertionDate *bool `queryParam:"style=form,explode=true,name=useInsertionDate"`
}

func (g *GetBalancesAggregatedRequest) GetAddress() *string {
	if g == nil {
		return nil
	}
	return g.Address
}

func (g *GetBalancesAggregatedRequest) GetLedger() string {
	if g == nil {
		return ""
	}
	return g.Ledger
}

func (g *GetBalancesAggregatedRequest) GetUseInsertionDate() *bool {
	if g == nil {
		return nil
	}
	return g.UseInsertionDate
}

type GetBalancesAggregatedResponse struct {
	// OK
	AggregateBalancesResponse *shared.AggregateBalancesResponse
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (g *GetBalancesAggregatedResponse) GetAggregateBalancesResponse() *shared.AggregateBalancesResponse {
	if g == nil {
		return nil
	}
	return g.AggregateBalancesResponse
}

func (g *GetBalancesAggregatedResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetBalancesAggregatedResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetBalancesAggregatedResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}
