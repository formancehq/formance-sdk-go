// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/models/shared"
	"net/http"
)

type V2CreateBulkRequest struct {
	RequestBody []shared.V2BulkElement `request:"mediaType=application/json"`
	// Make bulk atomic
	Atomic *bool `queryParam:"style=form,explode=true,name=atomic"`
	// Continue on failure
	ContinueOnFailure *bool `queryParam:"style=form,explode=true,name=continueOnFailure"`
	// Name of the ledger.
	Ledger string `pathParam:"style=simple,explode=false,name=ledger"`
	// Process bulk elements in parallel
	Parallel *bool `queryParam:"style=form,explode=true,name=parallel"`
}

func (v *V2CreateBulkRequest) GetRequestBody() []shared.V2BulkElement {
	if v == nil {
		return []shared.V2BulkElement{}
	}
	return v.RequestBody
}

func (v *V2CreateBulkRequest) GetAtomic() *bool {
	if v == nil {
		return nil
	}
	return v.Atomic
}

func (v *V2CreateBulkRequest) GetContinueOnFailure() *bool {
	if v == nil {
		return nil
	}
	return v.ContinueOnFailure
}

func (v *V2CreateBulkRequest) GetLedger() string {
	if v == nil {
		return ""
	}
	return v.Ledger
}

func (v *V2CreateBulkRequest) GetParallel() *bool {
	if v == nil {
		return nil
	}
	return v.Parallel
}

type V2CreateBulkResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	V2BulkResponse *shared.V2BulkResponse
}

func (v *V2CreateBulkResponse) GetContentType() string {
	if v == nil {
		return ""
	}
	return v.ContentType
}

func (v *V2CreateBulkResponse) GetStatusCode() int {
	if v == nil {
		return 0
	}
	return v.StatusCode
}

func (v *V2CreateBulkResponse) GetRawResponse() *http.Response {
	if v == nil {
		return nil
	}
	return v.RawResponse
}

func (v *V2CreateBulkResponse) GetV2BulkResponse() *shared.V2BulkResponse {
	if v == nil {
		return nil
	}
	return v.V2BulkResponse
}
