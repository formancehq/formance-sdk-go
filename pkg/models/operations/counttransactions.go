// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
	"net/http"
	"time"
)

// Metadata - Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.
type Metadata struct {
}

type CountTransactionsRequest struct {
	// Filter transactions with postings involving given account, either as source or destination (regular expression placed between ^ and $).
	Account *string `queryParam:"style=form,explode=true,name=account"`
	// Filter transactions with postings involving given account at destination (regular expression placed between ^ and $).
	Destination *string `queryParam:"style=form,explode=true,name=destination"`
	// Filter transactions that occurred before this timestamp.
	// The format is RFC3339 and is exclusive (for example, "2023-01-02T15:04:01Z" excludes the first second of 4th minute).
	//
	EndTime *time.Time `queryParam:"style=form,explode=true,name=endTime"`
	// Name of the ledger.
	Ledger string `pathParam:"style=simple,explode=false,name=ledger"`
	// Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.
	Metadata *Metadata `queryParam:"style=deepObject,explode=true,name=metadata"`
	// Filter transactions by reference field.
	Reference *string `queryParam:"style=form,explode=true,name=reference"`
	// Filter transactions with postings involving given account at source (regular expression placed between ^ and $).
	Source *string `queryParam:"style=form,explode=true,name=source"`
	// Filter transactions that occurred after this timestamp.
	// The format is RFC3339 and is inclusive (for example, "2023-01-02T15:04:01Z" includes the first second of 4th minute).
	//
	StartTime *time.Time `queryParam:"style=form,explode=true,name=startTime"`
}

func (c CountTransactionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CountTransactionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"ledger"}); err != nil {
		return err
	}
	return nil
}

func (c *CountTransactionsRequest) GetAccount() *string {
	if c == nil {
		return nil
	}
	return c.Account
}

func (c *CountTransactionsRequest) GetDestination() *string {
	if c == nil {
		return nil
	}
	return c.Destination
}

func (c *CountTransactionsRequest) GetEndTime() *time.Time {
	if c == nil {
		return nil
	}
	return c.EndTime
}

func (c *CountTransactionsRequest) GetLedger() string {
	if c == nil {
		return ""
	}
	return c.Ledger
}

func (c *CountTransactionsRequest) GetMetadata() *Metadata {
	if c == nil {
		return nil
	}
	return c.Metadata
}

func (c *CountTransactionsRequest) GetReference() *string {
	if c == nil {
		return nil
	}
	return c.Reference
}

func (c *CountTransactionsRequest) GetSource() *string {
	if c == nil {
		return nil
	}
	return c.Source
}

func (c *CountTransactionsRequest) GetStartTime() *time.Time {
	if c == nil {
		return nil
	}
	return c.StartTime
}

type CountTransactionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (c *CountTransactionsResponse) GetContentType() string {
	if c == nil {
		return ""
	}
	return c.ContentType
}

func (c *CountTransactionsResponse) GetHeaders() map[string][]string {
	if c == nil {
		return map[string][]string{}
	}
	return c.Headers
}

func (c *CountTransactionsResponse) GetStatusCode() int {
	if c == nil {
		return 0
	}
	return c.StatusCode
}

func (c *CountTransactionsResponse) GetRawResponse() *http.Response {
	if c == nil {
		return nil
	}
	return c.RawResponse
}
