// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/models/shared"
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
	"net/http"
	"time"
)

type ListLogsRequest struct {
	// Pagination cursor, will return the logs after a given ID. (in descending order).
	After *string `queryParam:"style=form,explode=true,name=after"`
	// Parameter used in pagination requests. Maximum page size is set to 1000.
	// Set to the value of next for the next page of results.
	// Set to the value of previous for the previous page of results.
	// No other parameters can be set when this parameter is set.
	//
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// Filter transactions that occurred before this timestamp.
	// The format is RFC3339 and is exclusive (for example, "2023-01-02T15:04:01Z" excludes the first second of 4th minute).
	//
	EndTime *time.Time `queryParam:"style=form,explode=true,name=endTime"`
	// Name of the ledger.
	Ledger string `pathParam:"style=simple,explode=false,name=ledger"`
	// The maximum number of results to return per page.
	//
	PageSize *int64 `queryParam:"style=form,explode=true,name=pageSize"`
	// Filter transactions that occurred after this timestamp.
	// The format is RFC3339 and is inclusive (for example, "2023-01-02T15:04:01Z" includes the first second of 4th minute).
	//
	StartTime *time.Time `queryParam:"style=form,explode=true,name=startTime"`
}

func (l ListLogsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListLogsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"ledger"}); err != nil {
		return err
	}
	return nil
}

func (l *ListLogsRequest) GetAfter() *string {
	if l == nil {
		return nil
	}
	return l.After
}

func (l *ListLogsRequest) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListLogsRequest) GetEndTime() *time.Time {
	if l == nil {
		return nil
	}
	return l.EndTime
}

func (l *ListLogsRequest) GetLedger() string {
	if l == nil {
		return ""
	}
	return l.Ledger
}

func (l *ListLogsRequest) GetPageSize() *int64 {
	if l == nil {
		return nil
	}
	return l.PageSize
}

func (l *ListLogsRequest) GetStartTime() *time.Time {
	if l == nil {
		return nil
	}
	return l.StartTime
}

type ListLogsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// OK
	LogsCursorResponse *shared.LogsCursorResponse
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (l *ListLogsResponse) GetContentType() string {
	if l == nil {
		return ""
	}
	return l.ContentType
}

func (l *ListLogsResponse) GetLogsCursorResponse() *shared.LogsCursorResponse {
	if l == nil {
		return nil
	}
	return l.LogsCursorResponse
}

func (l *ListLogsResponse) GetStatusCode() int {
	if l == nil {
		return 0
	}
	return l.StatusCode
}

func (l *ListLogsResponse) GetRawResponse() *http.Response {
	if l == nil {
		return nil
	}
	return l.RawResponse
}
