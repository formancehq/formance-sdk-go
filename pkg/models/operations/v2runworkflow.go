// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/models/shared"
	"net/http"
)

type V2RunWorkflowRequest struct {
	RequestBody map[string]string `request:"mediaType=application/json"`
	// Wait end of the workflow before return
	Wait *bool `queryParam:"style=form,explode=true,name=wait"`
	// The flow id
	WorkflowID string `pathParam:"style=simple,explode=false,name=workflowID"`
}

func (v *V2RunWorkflowRequest) GetRequestBody() map[string]string {
	if v == nil {
		return nil
	}
	return v.RequestBody
}

func (v *V2RunWorkflowRequest) GetWait() *bool {
	if v == nil {
		return nil
	}
	return v.Wait
}

func (v *V2RunWorkflowRequest) GetWorkflowID() string {
	if v == nil {
		return ""
	}
	return v.WorkflowID
}

type V2RunWorkflowResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The workflow instance
	V2RunWorkflowResponse *shared.V2RunWorkflowResponse
}

func (v *V2RunWorkflowResponse) GetContentType() string {
	if v == nil {
		return ""
	}
	return v.ContentType
}

func (v *V2RunWorkflowResponse) GetStatusCode() int {
	if v == nil {
		return 0
	}
	return v.StatusCode
}

func (v *V2RunWorkflowResponse) GetRawResponse() *http.Response {
	if v == nil {
		return nil
	}
	return v.RawResponse
}

func (v *V2RunWorkflowResponse) GetV2RunWorkflowResponse() *shared.V2RunWorkflowResponse {
	if v == nil {
		return nil
	}
	return v.V2RunWorkflowResponse
}
