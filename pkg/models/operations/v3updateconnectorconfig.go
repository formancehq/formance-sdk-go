// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/models/shared"
	"net/http"
)

type V3UpdateConnectorConfigRequest struct {
	V3InstallConnectorRequest *shared.V3InstallConnectorRequest `request:"mediaType=application/json"`
	// The connector ID
	ConnectorID string `pathParam:"style=simple,explode=false,name=connectorID"`
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequest() *shared.V3InstallConnectorRequest {
	if v == nil {
		return nil
	}
	return v.V3InstallConnectorRequest
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestAdyen() *shared.V3AdyenConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3AdyenConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestAtlar() *shared.V3AtlarConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3AtlarConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestBankingcircle() *shared.V3BankingcircleConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3BankingcircleConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestColumn() *shared.V3ColumnConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3ColumnConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestCurrencycloud() *shared.V3CurrencycloudConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3CurrencycloudConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestDummypay() *shared.V3DummypayConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3DummypayConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestGeneric() *shared.V3GenericConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3GenericConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestMangopay() *shared.V3MangopayConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3MangopayConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestModulr() *shared.V3ModulrConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3ModulrConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestMoneycorp() *shared.V3MoneycorpConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3MoneycorpConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestQonto() *shared.V3QontoConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3QontoConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestStripe() *shared.V3StripeConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3StripeConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetV3InstallConnectorRequestWise() *shared.V3WiseConfig {
	if v := v.GetV3InstallConnectorRequest(); v != nil {
		return v.V3WiseConfig
	}
	return nil
}

func (v *V3UpdateConnectorConfigRequest) GetConnectorID() string {
	if v == nil {
		return ""
	}
	return v.ConnectorID
}

type V3UpdateConnectorConfigResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (v *V3UpdateConnectorConfigResponse) GetContentType() string {
	if v == nil {
		return ""
	}
	return v.ContentType
}

func (v *V3UpdateConnectorConfigResponse) GetStatusCode() int {
	if v == nil {
		return 0
	}
	return v.StatusCode
}

func (v *V3UpdateConnectorConfigResponse) GetRawResponse() *http.Response {
	if v == nil {
		return nil
	}
	return v.RawResponse
}
