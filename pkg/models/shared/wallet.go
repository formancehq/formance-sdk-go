// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
	"time"
)

type WalletBalances struct {
	Main AssetHolder `json:"main"`
}

func (w *WalletBalances) GetMain() AssetHolder {
	if w == nil {
		return AssetHolder{}
	}
	return w.Main
}

type Wallet struct {
	Balances  *WalletBalances `json:"balances,omitempty"`
	CreatedAt time.Time       `json:"createdAt"`
	// The unique ID of the wallet.
	ID     string `json:"id"`
	Ledger string `json:"ledger"`
	// Metadata associated with the wallet.
	Metadata map[string]string `json:"metadata"`
	Name     string            `json:"name"`
}

func (w Wallet) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *Wallet) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, []string{"createdAt", "id", "ledger", "metadata", "name"}); err != nil {
		return err
	}
	return nil
}

func (w *Wallet) GetBalances() *WalletBalances {
	if w == nil {
		return nil
	}
	return w.Balances
}

func (w *Wallet) GetCreatedAt() time.Time {
	if w == nil {
		return time.Time{}
	}
	return w.CreatedAt
}

func (w *Wallet) GetID() string {
	if w == nil {
		return ""
	}
	return w.ID
}

func (w *Wallet) GetLedger() string {
	if w == nil {
		return ""
	}
	return w.Ledger
}

func (w *Wallet) GetMetadata() map[string]string {
	if w == nil {
		return map[string]string{}
	}
	return w.Metadata
}

func (w *Wallet) GetName() string {
	if w == nil {
		return ""
	}
	return w.Name
}
