// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
	"time"
)

type Descriptor struct {
	Key  *string `json:"key,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (d Descriptor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *Descriptor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (d *Descriptor) GetKey() *string {
	if d == nil {
		return nil
	}
	return d.Key
}

func (d *Descriptor) GetName() *string {
	if d == nil {
		return nil
	}
	return d.Name
}

type TaskBankingCircleState struct {
}

func (t TaskBankingCircleState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskBankingCircleState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

type TaskBankingCircle struct {
	ConnectorID string                  `json:"connectorID"`
	CreatedAt   time.Time               `json:"createdAt"`
	Descriptor  Descriptor              `json:"descriptor"`
	Error       *string                 `json:"error,omitempty"`
	ID          string                  `json:"id"`
	State       *TaskBankingCircleState `json:"state,omitempty"`
	Status      TaskStatus              `json:"status"`
	UpdatedAt   time.Time               `json:"updatedAt"`
}

func (t TaskBankingCircle) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskBankingCircle) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"connectorID", "createdAt", "descriptor", "id", "status", "updatedAt"}); err != nil {
		return err
	}
	return nil
}

func (t *TaskBankingCircle) GetConnectorID() string {
	if t == nil {
		return ""
	}
	return t.ConnectorID
}

func (t *TaskBankingCircle) GetCreatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.CreatedAt
}

func (t *TaskBankingCircle) GetDescriptor() Descriptor {
	if t == nil {
		return Descriptor{}
	}
	return t.Descriptor
}

func (t *TaskBankingCircle) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TaskBankingCircle) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TaskBankingCircle) GetState() *TaskBankingCircleState {
	if t == nil {
		return nil
	}
	return t.State
}

func (t *TaskBankingCircle) GetStatus() TaskStatus {
	if t == nil {
		return TaskStatus("")
	}
	return t.Status
}

func (t *TaskBankingCircle) GetUpdatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.UpdatedAt
}
