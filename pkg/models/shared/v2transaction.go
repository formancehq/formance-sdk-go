// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
	"math/big"
	"time"
)

type V2Transaction struct {
	ID                         *big.Int                       `json:"id"`
	InsertedAt                 *time.Time                     `json:"insertedAt,omitempty"`
	Metadata                   map[string]string              `json:"metadata"`
	PostCommitEffectiveVolumes map[string]map[string]V2Volume `json:"postCommitEffectiveVolumes,omitempty"`
	PostCommitVolumes          map[string]map[string]V2Volume `json:"postCommitVolumes,omitempty"`
	Postings                   []V2Posting                    `json:"postings"`
	PreCommitEffectiveVolumes  map[string]map[string]V2Volume `json:"preCommitEffectiveVolumes,omitempty"`
	PreCommitVolumes           map[string]map[string]V2Volume `json:"preCommitVolumes,omitempty"`
	Reference                  *string                        `json:"reference,omitempty"`
	Reverted                   bool                           `json:"reverted"`
	RevertedAt                 *time.Time                     `json:"revertedAt,omitempty"`
	Timestamp                  time.Time                      `json:"timestamp"`
}

func (v V2Transaction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2Transaction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"id", "metadata", "postings", "reverted", "timestamp"}); err != nil {
		return err
	}
	return nil
}

func (v *V2Transaction) GetID() *big.Int {
	if v == nil {
		return big.NewInt(0)
	}
	return v.ID
}

func (v *V2Transaction) GetInsertedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.InsertedAt
}

func (v *V2Transaction) GetMetadata() map[string]string {
	if v == nil {
		return map[string]string{}
	}
	return v.Metadata
}

func (v *V2Transaction) GetPostCommitEffectiveVolumes() map[string]map[string]V2Volume {
	if v == nil {
		return nil
	}
	return v.PostCommitEffectiveVolumes
}

func (v *V2Transaction) GetPostCommitVolumes() map[string]map[string]V2Volume {
	if v == nil {
		return nil
	}
	return v.PostCommitVolumes
}

func (v *V2Transaction) GetPostings() []V2Posting {
	if v == nil {
		return []V2Posting{}
	}
	return v.Postings
}

func (v *V2Transaction) GetPreCommitEffectiveVolumes() map[string]map[string]V2Volume {
	if v == nil {
		return nil
	}
	return v.PreCommitEffectiveVolumes
}

func (v *V2Transaction) GetPreCommitVolumes() map[string]map[string]V2Volume {
	if v == nil {
		return nil
	}
	return v.PreCommitVolumes
}

func (v *V2Transaction) GetReference() *string {
	if v == nil {
		return nil
	}
	return v.Reference
}

func (v *V2Transaction) GetReverted() bool {
	if v == nil {
		return false
	}
	return v.Reverted
}

func (v *V2Transaction) GetRevertedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.RevertedAt
}

func (v *V2Transaction) GetTimestamp() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.Timestamp
}
