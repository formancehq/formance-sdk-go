// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
	"math/big"
)

type ExpandedDebitHold struct {
	Asset       string   `json:"asset"`
	Description string   `json:"description"`
	Destination *Subject `json:"destination,omitempty"`
	// The unique ID of the hold.
	ID string `json:"id"`
	// Metadata associated with the hold.
	Metadata map[string]string `json:"metadata"`
	// Original amount on hold
	OriginalAmount *big.Int `json:"originalAmount"`
	// Remaining amount on hold
	Remaining *big.Int `json:"remaining"`
	// The ID of the wallet the hold is associated with.
	WalletID string `json:"walletID"`
}

func (e ExpandedDebitHold) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExpandedDebitHold) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"asset", "description", "id", "metadata", "originalAmount", "remaining", "walletID"}); err != nil {
		return err
	}
	return nil
}

func (e *ExpandedDebitHold) GetAsset() string {
	if e == nil {
		return ""
	}
	return e.Asset
}

func (e *ExpandedDebitHold) GetDescription() string {
	if e == nil {
		return ""
	}
	return e.Description
}

func (e *ExpandedDebitHold) GetDestination() *Subject {
	if e == nil {
		return nil
	}
	return e.Destination
}

func (e *ExpandedDebitHold) GetDestinationAccount() *LedgerAccountSubject {
	if v := e.GetDestination(); v != nil {
		return v.LedgerAccountSubject
	}
	return nil
}

func (e *ExpandedDebitHold) GetDestinationWallet() *WalletSubject {
	if v := e.GetDestination(); v != nil {
		return v.WalletSubject
	}
	return nil
}

func (e *ExpandedDebitHold) GetID() string {
	if e == nil {
		return ""
	}
	return e.ID
}

func (e *ExpandedDebitHold) GetMetadata() map[string]string {
	if e == nil {
		return map[string]string{}
	}
	return e.Metadata
}

func (e *ExpandedDebitHold) GetOriginalAmount() *big.Int {
	if e == nil {
		return big.NewInt(0)
	}
	return e.OriginalAmount
}

func (e *ExpandedDebitHold) GetRemaining() *big.Int {
	if e == nil {
		return big.NewInt(0)
	}
	return e.Remaining
}

func (e *ExpandedDebitHold) GetWalletID() string {
	if e == nil {
		return ""
	}
	return e.WalletID
}
