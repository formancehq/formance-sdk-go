// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
	"math/big"
	"time"
)

type Raw struct {
}

type Payment struct {
	Adjustments          []PaymentAdjustment `json:"adjustments"`
	Amount               *big.Int            `json:"amount"`
	Asset                string              `json:"asset"`
	ConnectorID          string              `json:"connectorID"`
	CreatedAt            time.Time           `json:"createdAt"`
	DestinationAccountID string              `json:"destinationAccountID"`
	ID                   string              `json:"id"`
	InitialAmount        *big.Int            `json:"initialAmount"`
	Metadata             map[string]string   `json:"metadata"`
	Provider             *Connector          `json:"provider,omitempty"`
	Raw                  *Raw                `json:"raw"`
	Reference            string              `json:"reference"`
	Scheme               PaymentScheme       `json:"scheme"`
	SourceAccountID      string              `json:"sourceAccountID"`
	Status               PaymentStatus       `json:"status"`
	Type                 PaymentType         `json:"type"`
}

func (p Payment) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Payment) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"adjustments", "amount", "asset", "connectorID", "createdAt", "destinationAccountID", "id", "initialAmount", "reference", "scheme", "sourceAccountID", "status", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *Payment) GetAdjustments() []PaymentAdjustment {
	if p == nil {
		return []PaymentAdjustment{}
	}
	return p.Adjustments
}

func (p *Payment) GetAmount() *big.Int {
	if p == nil {
		return big.NewInt(0)
	}
	return p.Amount
}

func (p *Payment) GetAsset() string {
	if p == nil {
		return ""
	}
	return p.Asset
}

func (p *Payment) GetConnectorID() string {
	if p == nil {
		return ""
	}
	return p.ConnectorID
}

func (p *Payment) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *Payment) GetDestinationAccountID() string {
	if p == nil {
		return ""
	}
	return p.DestinationAccountID
}

func (p *Payment) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *Payment) GetInitialAmount() *big.Int {
	if p == nil {
		return big.NewInt(0)
	}
	return p.InitialAmount
}

func (p *Payment) GetMetadata() map[string]string {
	if p == nil {
		return nil
	}
	return p.Metadata
}

func (p *Payment) GetProvider() *Connector {
	if p == nil {
		return nil
	}
	return p.Provider
}

func (p *Payment) GetRaw() *Raw {
	if p == nil {
		return nil
	}
	return p.Raw
}

func (p *Payment) GetReference() string {
	if p == nil {
		return ""
	}
	return p.Reference
}

func (p *Payment) GetScheme() PaymentScheme {
	if p == nil {
		return PaymentScheme("")
	}
	return p.Scheme
}

func (p *Payment) GetSourceAccountID() string {
	if p == nil {
		return ""
	}
	return p.SourceAccountID
}

func (p *Payment) GetStatus() PaymentStatus {
	if p == nil {
		return PaymentStatus("")
	}
	return p.Status
}

func (p *Payment) GetType() PaymentType {
	if p == nil {
		return PaymentType("")
	}
	return p.Type
}
