// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
	"time"
)

type DebitWalletRequest struct {
	Amount      Monetary `json:"amount"`
	Balances    []string `json:"balances,omitempty"`
	Description *string  `json:"description,omitempty"`
	Destination *Subject `json:"destination,omitempty"`
	// Metadata associated with the wallet.
	Metadata map[string]string `json:"metadata"`
	// Set to true to create a pending hold. If false, the wallet will be debited immediately.
	Pending *bool `json:"pending,omitempty"`
	// cannot be used in conjunction with `pending` property
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

func (d DebitWalletRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DebitWalletRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"amount", "metadata"}); err != nil {
		return err
	}
	return nil
}

func (d *DebitWalletRequest) GetAmount() Monetary {
	if d == nil {
		return Monetary{}
	}
	return d.Amount
}

func (d *DebitWalletRequest) GetBalances() []string {
	if d == nil {
		return nil
	}
	return d.Balances
}

func (d *DebitWalletRequest) GetDescription() *string {
	if d == nil {
		return nil
	}
	return d.Description
}

func (d *DebitWalletRequest) GetDestination() *Subject {
	if d == nil {
		return nil
	}
	return d.Destination
}

func (d *DebitWalletRequest) GetDestinationAccount() *LedgerAccountSubject {
	if v := d.GetDestination(); v != nil {
		return v.LedgerAccountSubject
	}
	return nil
}

func (d *DebitWalletRequest) GetDestinationWallet() *WalletSubject {
	if v := d.GetDestination(); v != nil {
		return v.WalletSubject
	}
	return nil
}

func (d *DebitWalletRequest) GetMetadata() map[string]string {
	if d == nil {
		return map[string]string{}
	}
	return d.Metadata
}

func (d *DebitWalletRequest) GetPending() *bool {
	if d == nil {
		return nil
	}
	return d.Pending
}

func (d *DebitWalletRequest) GetTimestamp() *time.Time {
	if d == nil {
		return nil
	}
	return d.Timestamp
}
