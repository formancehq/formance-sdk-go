// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
	"time"
)

type TaskStripeDescriptor struct {
	Account string `json:"account"`
	Main    *bool  `json:"main,omitempty"`
	Name    string `json:"name"`
}

func (t TaskStripeDescriptor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskStripeDescriptor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"account", "name"}); err != nil {
		return err
	}
	return nil
}

func (t *TaskStripeDescriptor) GetAccount() string {
	if t == nil {
		return ""
	}
	return t.Account
}

func (t *TaskStripeDescriptor) GetMain() *bool {
	if t == nil {
		return nil
	}
	return t.Main
}

func (t *TaskStripeDescriptor) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

type TaskStripeState struct {
}

func (t TaskStripeState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskStripeState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

type TaskStripe struct {
	ConnectorID string               `json:"connectorID"`
	CreatedAt   time.Time            `json:"createdAt"`
	Descriptor  TaskStripeDescriptor `json:"descriptor"`
	Error       *string              `json:"error,omitempty"`
	ID          string               `json:"id"`
	State       *TaskStripeState     `json:"state,omitempty"`
	Status      TaskStatus           `json:"status"`
	UpdatedAt   time.Time            `json:"updatedAt"`
}

func (t TaskStripe) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskStripe) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"connectorID", "createdAt", "descriptor", "id", "status", "updatedAt"}); err != nil {
		return err
	}
	return nil
}

func (t *TaskStripe) GetConnectorID() string {
	if t == nil {
		return ""
	}
	return t.ConnectorID
}

func (t *TaskStripe) GetCreatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.CreatedAt
}

func (t *TaskStripe) GetDescriptor() TaskStripeDescriptor {
	if t == nil {
		return TaskStripeDescriptor{}
	}
	return t.Descriptor
}

func (t *TaskStripe) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TaskStripe) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TaskStripe) GetState() *TaskStripeState {
	if t == nil {
		return nil
	}
	return t.State
}

func (t *TaskStripe) GetStatus() TaskStatus {
	if t == nil {
		return TaskStatus("")
	}
	return t.Status
}

func (t *TaskStripe) GetUpdatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.UpdatedAt
}
