// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
)

type CurrencyCloudConfig struct {
	APIKey string `json:"apiKey"`
	// The endpoint to use for the API. Defaults to https://devapi.currencycloud.com
	Endpoint *string `json:"endpoint,omitempty"`
	// Username of the API Key holder
	LoginID string `json:"loginID"`
	Name    string `json:"name"`
	// The frequency at which the connector will fetch transactions
	PollingPeriod *string `default:"120s" json:"pollingPeriod"`
	Provider      *string `default:"Currencycloud" json:"provider"`
}

func (c CurrencyCloudConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CurrencyCloudConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"apiKey", "loginID", "name"}); err != nil {
		return err
	}
	return nil
}

func (c *CurrencyCloudConfig) GetAPIKey() string {
	if c == nil {
		return ""
	}
	return c.APIKey
}

func (c *CurrencyCloudConfig) GetEndpoint() *string {
	if c == nil {
		return nil
	}
	return c.Endpoint
}

func (c *CurrencyCloudConfig) GetLoginID() string {
	if c == nil {
		return ""
	}
	return c.LoginID
}

func (c *CurrencyCloudConfig) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CurrencyCloudConfig) GetPollingPeriod() *string {
	if c == nil {
		return nil
	}
	return c.PollingPeriod
}

func (c *CurrencyCloudConfig) GetProvider() *string {
	if c == nil {
		return nil
	}
	return c.Provider
}
