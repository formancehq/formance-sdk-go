// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
	"math/big"
	"time"
)

type V2LogType string

const (
	V2LogTypeNewTransaction      V2LogType = "NEW_TRANSACTION"
	V2LogTypeSetMetadata         V2LogType = "SET_METADATA"
	V2LogTypeRevertedTransaction V2LogType = "REVERTED_TRANSACTION"
	V2LogTypeDeleteMetadata      V2LogType = "DELETE_METADATA"
)

func (e V2LogType) ToPointer() *V2LogType {
	return &e
}
func (e *V2LogType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW_TRANSACTION":
		fallthrough
	case "SET_METADATA":
		fallthrough
	case "REVERTED_TRANSACTION":
		fallthrough
	case "DELETE_METADATA":
		*e = V2LogType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V2LogType: %v", v)
	}
}

type V2Log struct {
	Data map[string]any `json:"data"`
	Date time.Time      `json:"date"`
	Hash string         `json:"hash"`
	ID   *big.Int       `json:"id"`
	Type V2LogType      `json:"type"`
}

func (v V2Log) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2Log) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"data", "date", "hash", "id", "type"}); err != nil {
		return err
	}
	return nil
}

func (v *V2Log) GetData() map[string]any {
	if v == nil {
		return map[string]any{}
	}
	return v.Data
}

func (v *V2Log) GetDate() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.Date
}

func (v *V2Log) GetHash() string {
	if v == nil {
		return ""
	}
	return v.Hash
}

func (v *V2Log) GetID() *big.Int {
	if v == nil {
		return big.NewInt(0)
	}
	return v.ID
}

func (v *V2Log) GetType() V2LogType {
	if v == nil {
		return V2LogType("")
	}
	return v.Type
}
