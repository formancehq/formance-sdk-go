// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type Total struct {
	Relation *string `json:"relation,omitempty"`
	Value    *int64  `json:"value,omitempty"`
}

func (t *Total) GetRelation() *string {
	if t == nil {
		return nil
	}
	return t.Relation
}

func (t *Total) GetValue() *int64 {
	if t == nil {
		return nil
	}
	return t.Value
}

type ResponseCursor struct {
	Data     []map[string]any `json:"data,omitempty"`
	HasMore  *bool            `json:"hasMore,omitempty"`
	Next     *string          `json:"next,omitempty"`
	PageSize *int64           `json:"pageSize,omitempty"`
	Previous *string          `json:"previous,omitempty"`
	Total    *Total           `json:"total,omitempty"`
}

func (r *ResponseCursor) GetData() []map[string]any {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResponseCursor) GetHasMore() *bool {
	if r == nil {
		return nil
	}
	return r.HasMore
}

func (r *ResponseCursor) GetNext() *string {
	if r == nil {
		return nil
	}
	return r.Next
}

func (r *ResponseCursor) GetPageSize() *int64 {
	if r == nil {
		return nil
	}
	return r.PageSize
}

func (r *ResponseCursor) GetPrevious() *string {
	if r == nil {
		return nil
	}
	return r.Previous
}

func (r *ResponseCursor) GetTotal() *Total {
	if r == nil {
		return nil
	}
	return r.Total
}

type Response struct {
	Cursor *ResponseCursor `json:"cursor,omitempty"`
	// The payload
	Data map[string]any `json:"data,omitempty"`
}

func (r *Response) GetCursor() *ResponseCursor {
	if r == nil {
		return nil
	}
	return r.Cursor
}

func (r *Response) GetData() map[string]any {
	if r == nil {
		return nil
	}
	return r.Data
}
