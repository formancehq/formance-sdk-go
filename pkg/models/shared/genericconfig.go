// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
)

type GenericConfig struct {
	APIKey   string `json:"apiKey"`
	Endpoint string `json:"endpoint"`
	Name     string `json:"name"`
	// The frequency at which the connector will try to fetch new BalanceTransaction objects from the API.
	//
	PollingPeriod *string `default:"120s" json:"pollingPeriod"`
	Provider      *string `default:"Generic" json:"provider"`
}

func (g GenericConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GenericConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"apiKey", "endpoint", "name"}); err != nil {
		return err
	}
	return nil
}

func (g *GenericConfig) GetAPIKey() string {
	if g == nil {
		return ""
	}
	return g.APIKey
}

func (g *GenericConfig) GetEndpoint() string {
	if g == nil {
		return ""
	}
	return g.Endpoint
}

func (g *GenericConfig) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GenericConfig) GetPollingPeriod() *string {
	if g == nil {
		return nil
	}
	return g.PollingPeriod
}

func (g *GenericConfig) GetProvider() *string {
	if g == nil {
		return nil
	}
	return g.Provider
}
