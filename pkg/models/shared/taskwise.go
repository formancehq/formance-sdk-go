// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/formancehq/formance-sdk-go/v3/pkg/utils"
	"time"
)

type TaskWiseDescriptor struct {
	Key       *string `json:"key,omitempty"`
	Name      *string `json:"name,omitempty"`
	ProfileID *int64  `json:"profileID,omitempty"`
}

func (t TaskWiseDescriptor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskWiseDescriptor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *TaskWiseDescriptor) GetKey() *string {
	if t == nil {
		return nil
	}
	return t.Key
}

func (t *TaskWiseDescriptor) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *TaskWiseDescriptor) GetProfileID() *int64 {
	if t == nil {
		return nil
	}
	return t.ProfileID
}

type TaskWiseState struct {
}

func (t TaskWiseState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskWiseState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

type TaskWise struct {
	ConnectorID string             `json:"connectorID"`
	CreatedAt   time.Time          `json:"createdAt"`
	Descriptor  TaskWiseDescriptor `json:"descriptor"`
	Error       *string            `json:"error,omitempty"`
	ID          string             `json:"id"`
	State       *TaskWiseState     `json:"state,omitempty"`
	Status      TaskStatus         `json:"status"`
	UpdatedAt   time.Time          `json:"updatedAt"`
}

func (t TaskWise) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskWise) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"connectorID", "createdAt", "descriptor", "id", "status", "updatedAt"}); err != nil {
		return err
	}
	return nil
}

func (t *TaskWise) GetConnectorID() string {
	if t == nil {
		return ""
	}
	return t.ConnectorID
}

func (t *TaskWise) GetCreatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.CreatedAt
}

func (t *TaskWise) GetDescriptor() TaskWiseDescriptor {
	if t == nil {
		return TaskWiseDescriptor{}
	}
	return t.Descriptor
}

func (t *TaskWise) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TaskWise) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TaskWise) GetState() *TaskWiseState {
	if t == nil {
		return nil
	}
	return t.State
}

func (t *TaskWise) GetStatus() TaskStatus {
	if t == nil {
		return TaskStatus("")
	}
	return t.Status
}

func (t *TaskWise) GetUpdatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.UpdatedAt
}
