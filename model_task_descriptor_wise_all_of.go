/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.0-rc.1
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the TaskDescriptorWiseAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskDescriptorWiseAllOf{}

// TaskDescriptorWiseAllOf struct for TaskDescriptorWiseAllOf
type TaskDescriptorWiseAllOf struct {
	Descriptor *TaskDescriptorWiseAllOfDescriptor `json:"descriptor,omitempty"`
}

// NewTaskDescriptorWiseAllOf instantiates a new TaskDescriptorWiseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskDescriptorWiseAllOf() *TaskDescriptorWiseAllOf {
	this := TaskDescriptorWiseAllOf{}
	return &this
}

// NewTaskDescriptorWiseAllOfWithDefaults instantiates a new TaskDescriptorWiseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskDescriptorWiseAllOfWithDefaults() *TaskDescriptorWiseAllOf {
	this := TaskDescriptorWiseAllOf{}
	return &this
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *TaskDescriptorWiseAllOf) GetDescriptor() TaskDescriptorWiseAllOfDescriptor {
	if o == nil || isNil(o.Descriptor) {
		var ret TaskDescriptorWiseAllOfDescriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDescriptorWiseAllOf) GetDescriptorOk() (*TaskDescriptorWiseAllOfDescriptor, bool) {
	if o == nil || isNil(o.Descriptor) {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *TaskDescriptorWiseAllOf) HasDescriptor() bool {
	if o != nil && !isNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given TaskDescriptorWiseAllOfDescriptor and assigns it to the Descriptor field.
func (o *TaskDescriptorWiseAllOf) SetDescriptor(v TaskDescriptorWiseAllOfDescriptor) {
	o.Descriptor = &v
}

func (o TaskDescriptorWiseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskDescriptorWiseAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	return toSerialize, nil
}

type NullableTaskDescriptorWiseAllOf struct {
	value *TaskDescriptorWiseAllOf
	isSet bool
}

func (v NullableTaskDescriptorWiseAllOf) Get() *TaskDescriptorWiseAllOf {
	return v.value
}

func (v *NullableTaskDescriptorWiseAllOf) Set(val *TaskDescriptorWiseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskDescriptorWiseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskDescriptorWiseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskDescriptorWiseAllOf(val *TaskDescriptorWiseAllOf) *NullableTaskDescriptorWiseAllOf {
	return &NullableTaskDescriptorWiseAllOf{value: val, isSet: true}
}

func (v NullableTaskDescriptorWiseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskDescriptorWiseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


