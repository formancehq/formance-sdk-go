/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.0-rc.1
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the TaskDescriptorBankingCircleAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskDescriptorBankingCircleAllOf{}

// TaskDescriptorBankingCircleAllOf struct for TaskDescriptorBankingCircleAllOf
type TaskDescriptorBankingCircleAllOf struct {
	Descriptor *TaskDescriptorBankingCircleAllOfDescriptor `json:"descriptor,omitempty"`
}

// NewTaskDescriptorBankingCircleAllOf instantiates a new TaskDescriptorBankingCircleAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskDescriptorBankingCircleAllOf() *TaskDescriptorBankingCircleAllOf {
	this := TaskDescriptorBankingCircleAllOf{}
	return &this
}

// NewTaskDescriptorBankingCircleAllOfWithDefaults instantiates a new TaskDescriptorBankingCircleAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskDescriptorBankingCircleAllOfWithDefaults() *TaskDescriptorBankingCircleAllOf {
	this := TaskDescriptorBankingCircleAllOf{}
	return &this
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *TaskDescriptorBankingCircleAllOf) GetDescriptor() TaskDescriptorBankingCircleAllOfDescriptor {
	if o == nil || isNil(o.Descriptor) {
		var ret TaskDescriptorBankingCircleAllOfDescriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDescriptorBankingCircleAllOf) GetDescriptorOk() (*TaskDescriptorBankingCircleAllOfDescriptor, bool) {
	if o == nil || isNil(o.Descriptor) {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *TaskDescriptorBankingCircleAllOf) HasDescriptor() bool {
	if o != nil && !isNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given TaskDescriptorBankingCircleAllOfDescriptor and assigns it to the Descriptor field.
func (o *TaskDescriptorBankingCircleAllOf) SetDescriptor(v TaskDescriptorBankingCircleAllOfDescriptor) {
	o.Descriptor = &v
}

func (o TaskDescriptorBankingCircleAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskDescriptorBankingCircleAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	return toSerialize, nil
}

type NullableTaskDescriptorBankingCircleAllOf struct {
	value *TaskDescriptorBankingCircleAllOf
	isSet bool
}

func (v NullableTaskDescriptorBankingCircleAllOf) Get() *TaskDescriptorBankingCircleAllOf {
	return v.value
}

func (v *NullableTaskDescriptorBankingCircleAllOf) Set(val *TaskDescriptorBankingCircleAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskDescriptorBankingCircleAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskDescriptorBankingCircleAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskDescriptorBankingCircleAllOf(val *TaskDescriptorBankingCircleAllOf) *NullableTaskDescriptorBankingCircleAllOf {
	return &NullableTaskDescriptorBankingCircleAllOf{value: val, isSet: true}
}

func (v NullableTaskDescriptorBankingCircleAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskDescriptorBankingCircleAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


