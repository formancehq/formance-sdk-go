/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v0.2.8
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the ConfigResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigResponse{}

// ConfigResponse struct for ConfigResponse
type ConfigResponse struct {
	Data *WebhooksConfig `json:"data,omitempty"`
}

// NewConfigResponse instantiates a new ConfigResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigResponse() *ConfigResponse {
	this := ConfigResponse{}
	return &this
}

// NewConfigResponseWithDefaults instantiates a new ConfigResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigResponseWithDefaults() *ConfigResponse {
	this := ConfigResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConfigResponse) GetData() WebhooksConfig {
	if o == nil || isNil(o.Data) {
		var ret WebhooksConfig
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigResponse) GetDataOk() (*WebhooksConfig, bool) {
	if o == nil || isNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConfigResponse) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given WebhooksConfig and assigns it to the Data field.
func (o *ConfigResponse) SetData(v WebhooksConfig) {
	o.Data = &v
}

func (o ConfigResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableConfigResponse struct {
	value *ConfigResponse
	isSet bool
}

func (v NullableConfigResponse) Get() *ConfigResponse {
	return v.value
}

func (v *NullableConfigResponse) Set(val *ConfigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigResponse(val *ConfigResponse) *NullableConfigResponse {
	return &NullableConfigResponse{value: val, isSet: true}
}

func (v NullableConfigResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


