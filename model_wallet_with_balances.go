/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the WalletWithBalances type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletWithBalances{}

// WalletWithBalances struct for WalletWithBalances
type WalletWithBalances struct {
	// The unique ID of the wallet.
	Id string `json:"id"`
	// Metadata associated with the wallet.
	Metadata map[string]interface{} `json:"metadata"`
	Balances map[string]int32 `json:"balances"`
	Name string `json:"name"`
}

// NewWalletWithBalances instantiates a new WalletWithBalances object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletWithBalances(id string, metadata map[string]interface{}, balances map[string]int32, name string) *WalletWithBalances {
	this := WalletWithBalances{}
	this.Id = id
	this.Metadata = metadata
	this.Balances = balances
	this.Name = name
	return &this
}

// NewWalletWithBalancesWithDefaults instantiates a new WalletWithBalances object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletWithBalancesWithDefaults() *WalletWithBalances {
	this := WalletWithBalances{}
	return &this
}

// GetId returns the Id field value
func (o *WalletWithBalances) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WalletWithBalances) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WalletWithBalances) SetId(v string) {
	o.Id = v
}

// GetMetadata returns the Metadata field value
func (o *WalletWithBalances) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *WalletWithBalances) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *WalletWithBalances) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetBalances returns the Balances field value
func (o *WalletWithBalances) GetBalances() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value
// and a boolean to check if the value has been set.
func (o *WalletWithBalances) GetBalancesOk() (*map[string]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balances, true
}

// SetBalances sets field value
func (o *WalletWithBalances) SetBalances(v map[string]int32) {
	o.Balances = v
}

// GetName returns the Name field value
func (o *WalletWithBalances) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WalletWithBalances) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WalletWithBalances) SetName(v string) {
	o.Name = v
}

func (o WalletWithBalances) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletWithBalances) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["metadata"] = o.Metadata
	toSerialize["balances"] = o.Balances
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableWalletWithBalances struct {
	value *WalletWithBalances
	isSet bool
}

func (v NullableWalletWithBalances) Get() *WalletWithBalances {
	return v.value
}

func (v *NullableWalletWithBalances) Set(val *WalletWithBalances) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletWithBalances) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletWithBalances) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletWithBalances(val *WalletWithBalances) *NullableWalletWithBalances {
	return &NullableWalletWithBalances{value: val, isSet: true}
}

func (v NullableWalletWithBalances) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletWithBalances) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


